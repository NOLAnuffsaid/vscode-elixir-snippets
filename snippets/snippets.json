{
	"Case Statement": {
		"prefix": "case",
		"body": "case $1 do\n  $2 ->\n    $0\nend",
		"description": "case",
		"scope": "source.elixir"
	},
	"Cond..Do": {
		"prefix": "cond",
		"body": "cond do\n  $1 ->\n    $0\nend",
		"description": "cond",
		"scope": "source.elixir"
	},
	"Def": {
		"prefix": "def",
		"body": "def $1 do\n\t$0\nend",
		"description": "def",
		"scope": "source.elixir"
	},
	"Inline Def": {
		"prefix": "df",
		"body": "def $1, do: $0",
		"description": "def (one line)",
		"scope": "source.elixir"
	},
	"Callback Function": {
		"prefix": "defc",
		"body": "defcallback $1 :: $0",
		"description": "defcallback",
		"scope": "source.elixir"
	},
	"Delegate Function": {
		"prefix": "defd",
		"body": "defdelegate $1 to: $0",
		"description": "defdelegate",
		"scope": "source.elixir"
	},
	"Define Exception": {
		"prefix": "defe",
		"body": "defexception [${1::message}]",
		"description": "defexception",
		"scope": "source.elixir"
	},
	"Define an Implementation": {
		"prefix": "defi",
		"body": "defimpl $1, for: $2 do\n  $0\nend",
		"description": "defimpl",
		"scope": "source.elixir"
	},
	"Define a Macro": {
		"prefix": ["dmac", "defmac"],
		"body": "defmacro $1 do\n\t$0\nend",
		"description": "defmacro",
		"scope": "source.elixir"
	},
	"Define a Macro Callback": {
		"prefix": "defmc",
		"body": "defmacrocallback $1 :: $0",
		"description": "defmacrocallback",
		"scope": "source.elixir"
	},
	"defmp": {
		"prefix": "defmp",
		"body": "defmacrop $1 do\n\t$0\nend",
		"description": "defmacrop",
		"scope": "source.elixir"
	},
	"Describe Test Grouping": {
		"prefix": "describe",
		"body": "describe $1 do\n\t$0\nend",
		"description": "describe",
		"scope": "source.elixir"
	},
	"Define a Module": {
		"prefix": ["dmod", "defmod"],
		"body": "defmodule ${1:${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/}} do\n\t$0\nend",
		"description": "def module",
		"scope": "source.elixir"
	},
	"Define a Private Function": {
		"prefix": "defp",
		"body": "defp $1 do\n\t$0\nend",
		"description": "defp",
		"scope": "source.elixir"
	},
	"Define a Protocol": {
		"prefix": "defpro",
		"body": "defprotocol $1 do\n  $0\nend",
		"description": "defprotocol",
		"scope": "source.elixir"
	},
	"Define a Struct": {
		"prefix": "defs",
		"body": "defstruct $1: $2",
		"description": "defstruct",
		"scope": "source.elixir"
	},
	"Do...End Block": {
		"prefix": "do",
		"body": "do\n\t$0\nend",
		"description": "do",
		"scope": "source.elixir"
	},
	"Documentation": {
		"prefix": "doc",
		"body": "@doc \"\"\"\n$0\n\"\"\"",
		"description": "doc",
		"scope": "source.elixir"
	},
	"Embedded Elixir String": {
		"prefix": "ee",
		"body": "<% $0 %>",
		"description": "embed_eex",
		"scope": "text.elixir,text.html.elixir"
	},
	"Embedded Comprehension": {
		"prefix": ["ee", "for"],
		"body": [
      "<% for ${1:item} <- ${0:items} do %>",
      "\t$2",
      "<% end %>"
    ],
		"description": "embed_eex for comp",
		"scope": "text.elixir,text.html.elixir"
	},
	"Anonymous Function": {
		"prefix": "fn",
		"body": "fn -> $0 end",
		"description": "fn zero arity",
		"scope": "source.elixir"
	},
	"Anonymous Function with One Param": {
		"prefix": "fn1",
		"body": "fn $0 -> $1 end",
		"description": "fn one arity",
		"scope": "source.elixir"
	},
	"Anonymous Function with Two Param": {
		"prefix": "fn2",
		"body": "fn $0, $1 -> $2 end",
		"description": "fn two arity",
		"scope": "source.elixir"
	},
	"Anonymous Function with Three Param": {
    "prefix": "fn3",
		"body": "fn $0, $1, $2 -> $3 end",
		"description": "fn three arity",
		"scope": "source.elixir"
	},
	"For Comprehension": {
		"prefix": "for",
		"body": "for ${1:item} <- ${2:items} do\n  $0\nend",
		"description": "for",
		"scope": "source.elixir"
	},
	"For Comp Into": {
		"prefix": "fori",
		"body": "for ${1:item} <- ${2:items}, into: ${3:[]} do;\n  $0\nend",
		"description": "for into",
		"scope": "source.elixir"
	},
  "Handle Call": {
    "prefix": "hcall",
    "body": "def handle_call(${0:Message}, ${1:_from}, ${2:state}) do\nend",
    "description": "OTP callback to handle syncronous messages",
    "scope": "source.elixir"
  },
  "Handle Cast": {
    "prefix": "hcast",
    "body": "def handle_cast(${0:Message}, ${1:_from}, ${2:state}) do\nend",
    "description": "OTP callback to handle async messages",
    "scope": "source.elixir"
  },
  "Handle Info": {
    "prefix": "hinfo",
    "body": "def handle_info(${0:Message}, ${2:state}) do\nend",
    "description": "OTP callback to handle async messages",
    "scope": "source.elixir"
  },
	"If Do...End": {
		"prefix": "if",
		"body": "if $1 do\n  $0\nend",
		"description": "if",
		"scope": "source.elixir"
	},
	"If...Else...Do...End": {
		"prefix": "ife",
		"body": "if $1 do\n  $2\nelse\n  $0\nend",
		"description": "if else",
		"scope": "source.elixir"
	},
	"If...Else Function:": {
		"prefix": "ife:",
		"body": "if $1, do: $2, else: $0",
		"description": "if else (one line)",
		"scope": "source.elixir"
	},
	"If Function:": {
		"prefix": "if:",
		"body": "if $1, do: $0",
		"description": "if (one line)",
		"scope": "source.elixir"
	},
	"Import": {
		"prefix": "imp",
		"body": "import $0",
		"description": "import",
		"scope": "source.elixir"
	},
	"IO Inspect": {
		"prefix": "ii",
		"body": "IO.inspect($0)",
		"description": "IO.inspect",
		"scope": "source.elixir"
	},
	"iib": {
		"prefix": "iib",
		"body": "IO.inspect(binding(), label: \"binding() #{__MODULE__}:#{__ENV__.line} #{DateTime.utc_now}\", limit: :infinity)",
		"description": "IO.inspect() binding() with module name & line number"
	},
	"iil": {
		"prefix": "iil",
		"body": "IO.inspect(label: \"$0\")",
		"description": "IO.inspect(label: ...)",
		"scope": "source.elixir"
	},
	"iill": {
		"prefix": "iill",
		"body": "IO.inspect(label: \"${0:message; }#{String.replace_leading(\"#{__ENV__.file}\", \"#{File.cwd!()}\",\"\")|> Path.relative()}:#{__ENV__.line()}\")",
		"description": "IO.inspect(label: \"<optional message>; Module:line_nr\")",
		"scope": "source.elixir"
	},
	"iip": {
		"prefix": "iip",
		"body": "|> IO.inspect(label: \"#{__MODULE__}:#{__ENV__.line} #{DateTime.utc_now}\", limit: :infinity)",
		"description": "IO.inspect() piped value with module name & line number"
	},
	"IO Puts": {
		"prefix": "iip",
		"body": "IO.puts(\"$0\")",
		"description": "IO.puts(..)",
		"scope": "source.elixir"
	},
	"Map Key,Value Pair": {
		"prefix": "::",
		"body": "${1:key} => ${2:value}$0",
		"description": "key => value",
		"scope": "source.elixir"
	},
	"Struct": {
		"prefix": "%",
		"body": "%${1:Struct}{$2}$0",
		"description": "map/struct",
		"scope": "source.elixir"
	},
	"Module Doc": {
		"prefix": "mdoc",
		"body": "@moduledoc \"\"\"\n$0\n\"\"\"",
		"description": "moduledoc"
	},
  "Module, Function, Argument Pattern": {
    "prefix": "mfa",
    "body": "${0:Module}, ${1:FunctionAtom}, ${2:[Arguments]}",
    "description": "Standard MFA Elixir syntax",
    "scope": "source.elixir"
  },
	"Map From Struct": {
		"prefix": "mfs",
		"body": "Map.from_struct($0)",
		"description": "Map from Struct",
		"scope": "source.elixir,"
	},
	"msan": {
		"prefix": "msan",
		"body": "Map.drop(${1:map, }[${2:keys}])",
		"description": "sanitize a map by dropping some keys",
		"scope": "source.elixir,"
	},
	"Pipe Op": {
		"prefix": "p",
		"body": "|> $0",
		"description": "your favorite pipeline (|>)",
		"scope": "text.elixir,"
	},
	"Print Embedded": {
		"prefix": "pe",
		"body": "<%= $0 %>",
		"description": "print_eex",
		"scope": "text.elixir,text.html.elixir"
	},
	"Receive...Do": {
		"prefix": "rec",
		"body": "receive do\n\t${1:{${2::${3:message_type}}, ${4:value}\\}} ->\n    ${0:# code}\nend\n",
		"description": "receive",
		"scope": "source.elixir"
	},
	"Require": {
		"prefix": "req",
		"body": "require $0",
		"description": "require",
		"scope": "source.elixir"
	},
  "Async Task": {
    "prefix": ["async"],
    "body": "Task.async(fn -> $0 end)",
    "description": "spawn an async task that can be awaited on",
    "scope": "source.elixir"
  },
  "Await For Task": {
    "prefix": ["await"],
    "body": "Task.await($)",
    "scope": "source.elixir"
  },
  "Async...Await Pattern": {
    "prefix": ["task"],
    "body": [
      "Task.async(fn -> $0 end)",
      "Task.await($1)"
    ],
    "description": "common Async-Await pattern",
    "scope": "source.elixir"
  },
	"Ok Tuple Pattern": {
		"prefix": "ok",
		"body": "{:ok, $1} = $0",
		"description": "{:ok, ... } = ...",
		"scope": "source.elixir"
	},
	"Error Tuple Pattern": {
		"prefix": "error",
		"body": "{:error, $1} = $0",
		"description": "{:error, ... } = ...",
		"scope": "source.elixir"
	},
	"ok": {
		"prefix": "?ok?",
		"body": "{:ok, $1} $0",
		"description": "{:ok, ... } ...",
		"scope": "source.elixir"
	},
	"err": {
		"prefix": "?error?",
		"body": "{:error, $1} $0",
		"description": "{:error, ... } ...",
		"scope": "source.elixir"
	},
	"Define ExUnit Test": {
		"prefix": "test",
		"body": "test $1 do\n\t$0\nend",
		"description": "test",
		"scope": "source.elixir"
	},
	"Try...Do...Catch": {
		"prefix": "trc",
		"body": "try do\n  $0\ncatch\n $1 -> $2\nend",
		"description": "try catch",
		"scope": "source.elixir"
	},
	"Try...Do...Rescue": {
		"prefix": "trr",
		"body": "try do\n  $0\nrescue\n  _ -> :rescued\nend",
		"description": "try rescue (everything!)",
		"scope": "source.elixir"
	},
	"Unless...Do...Else": {
		"prefix": "unlesse",
		"body": "unless $1 do\n  $2\nelse\n  $0\nend",
		"description": "unless else",
		"scope": "source.elixir"
	},
	"Unless Else Function": {
		"prefix": "unlesse:",
		"body": "unless $1, do: $2, else: $0",
		"description": "unless else (one line)",
		"scope": "source.elixir"
	},
	"Unless Function": {
		"prefix": "unless:",
		"body": "unless $1, do: $0",
		"description": "unless (one line)",
		"scope": "source.elixir"
	},
	"Unless...Do": {
		"prefix": "unless",
		"body": "unless $1 do\n  $0\nend",
		"description": "unless",
		"scope": "source.elixir"
	},
	"Supervisor": {
		"prefix": "super",
		"body": [
			"defmodule ${0:moduleName} do",
			"\tuse Supervisor\n\n",
			"\tdef start_link(${1:args}) do",
			"\t\tSupervisor.start_link(__MODULE__, [${args}], name: ${2:Name})",
			"\tend\n\n",
			"\tdef init([${args}]) do",
			"\t\tchildren = []\n\n",
			"\t\tSupervisor.init(children, strategy: :one_for_one)",
			"\tend",
			"end"
		],
		"description": "Insert code for an OTP Supervisor",
		"scope": "source.elixir"
	},
	"DynamicSupervisor": {
		"prefix": "dynsuper",
		"body": [
			"defmodule ${0:ModuleName} do",
			"\tuse DynamicSupervisor\n\n",
			"\tdef start_link(${1:init_args}) do",
			"\t\tDynamicSupervisor.start_link(__MODULE__, [${init_args}], name: ${2:Name})",
			"\tend\n\n",
      "\t@impl true",
			"\tdef init([${init_args}]) do",
			"\t\tDynamicSupervisor.init(strategy: :one_for_one)",
			"\tend",
			"end"
		],
		"description": "Insert code for a DynamicSupervisor",
		"scope": "source.elixir"
	},
	"GenServer": {
		"prefix": "genserver",
		"body": [
			"defmodule ${0:ModuleName} do",
			"\tuse GenServer\n\n",
			"\tdef start_link(${1:init_args}) do",
			"\t\tGenServer.start_link(__MODULE__, [${init_args}])",
			"\tend\n\n",
			"\tdef init(${init_args}) do",
			"\t\t{:ok, ${2:IntialState}}",
			"\tend",
			"end"
		],
		"description": "Insert code for a OTP GenServer",
		"scope": "source.elixir"
	},
	"ExUnit": {
		"prefix": ["ex_unit", "exu"],
		"body": [
			"defmodule${1:${TM_DIRECTORY/(^.+\\\/test|\\b)\\\/(\\w+)/${1:? :.}${2:/pascalcase}/g}.${TM_FILENAME_BASE/(.+)_test/${1:/pascalcase}/}}Test do",
			"\tuse ExUnit.Case",
			"\tdoctest$1",
			"",
			"\tdescribe \"${2:description_of_tests}\" do",
			"\t\ttest \"${3:definition_of_this_test}\" do",
			"\t\tend",
			"\tend",
			"end"
		],
		"description": "Insert code for a ExUnit",
		"scope": "source.elixir"
	},
	"With...Do": {
		"prefix": "wt",
		"body": [
			"with $1 do",
			"\t$0",
			"end"
		],
		"description": "with",
		"scope": "source.elixir"
	},
	"With...Do...Else": {
		"prefix": "wte",
		"body": [
			"with $1 do",
			"\t$0",
			"else",
			"\t$2 -> $3",
			"end"
		],
		"description": "with/else",
		"scope": "source.elixir"
	}
}
